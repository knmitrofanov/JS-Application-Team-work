{
  "_args": [
    [
      {
        "hosted": {
          "directUrl": "https://raw.githubusercontent.com/vdininski/mingo/master/package.json",
          "gitUrl": "git://github.com/vdininski/mingo.git",
          "httpsUrl": "git+https://github.com/vdininski/mingo.git",
          "shortcut": "github:vdininski/mingo",
          "ssh": "git@github.com:vdininski/mingo.git",
          "sshUrl": "git+ssh://git@github.com/vdininski/mingo.git",
          "type": "github"
        },
        "name": "mingo",
        "raw": "mingo@git+https://github.com/vdininski/mingo.git",
        "rawSpec": "git+https://github.com/vdininski/mingo.git",
        "scope": null,
        "spec": "git+https://github.com/vdininski/mingo.git",
        "type": "hosted"
      },
      "c:\\Users\\KALIN4O\\Desktop\\JS-Application-Team-work-master\\VideoForum\\node_modules\\everlive-sdk"
    ]
  ],
  "_from": "git+https://github.com/vdininski/mingo.git",
  "_id": "mingo@0.6.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/mingo",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/vdininski/mingo/master/package.json",
      "gitUrl": "git://github.com/vdininski/mingo.git",
      "httpsUrl": "git+https://github.com/vdininski/mingo.git",
      "shortcut": "github:vdininski/mingo",
      "ssh": "git@github.com:vdininski/mingo.git",
      "sshUrl": "git+ssh://git@github.com/vdininski/mingo.git",
      "type": "github"
    },
    "name": "mingo",
    "raw": "mingo@git+https://github.com/vdininski/mingo.git",
    "rawSpec": "git+https://github.com/vdininski/mingo.git",
    "scope": null,
    "spec": "git+https://github.com/vdininski/mingo.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/everlive-sdk"
  ],
  "_resolved": "git+https://github.com/vdininski/mingo.git#02db1e7a7fa538d7d54e0f6e60d49a7c460b42f5",
  "_shasum": "0d61775561f03fa732ace570b6b253e84164d43f",
  "_shrinkwrap": null,
  "_spec": "mingo@git+https://github.com/vdininski/mingo.git",
  "_where": "c:\\Users\\KALIN4O\\Desktop\\JS-Application-Team-work-master\\VideoForum\\node_modules\\everlive-sdk",
  "author": {
    "email": "kofrasa@gmail.com",
    "name": "Francis Asante"
  },
  "bugs": {
    "url": "https://github.com/kofrasa/mingo/issues"
  },
  "dependencies": {
    "underscore": ">=1.5.2"
  },
  "description": "JavaScript implementation of MongoDB query language",
  "devDependencies": {
    "JSON": ">=1.0.0",
    "backbone": ">=1.1.2",
    "gulp": ">=3.8.11",
    "gulp-cli": ">=0.2.0",
    "gulp-plumber": ">=1.0.0",
    "gulp-rename": ">=1.2.0",
    "gulp-uglify": ">=1.1.0",
    "tape": ">=2.14.0",
    "uglify-js": "2.4.x",
    "underscore": ">=1.5.2"
  },
  "directories": {
    "test": "test"
  },
  "files": [
    "mingo.js",
    "mingo.min.js",
    "README.md",
    "LICENSE"
  ],
  "gitHead": "02db1e7a7fa538d7d54e0f6e60d49a7c460b42f5",
  "homepage": "https://github.com/kofrasa/mingo#readme",
  "keywords": [
    "util",
    "mongo",
    "mongodb",
    "nosql",
    "query",
    "browser",
    "querying",
    "functional",
    "aggregation",
    "filtering",
    "grouping",
    "searching"
  ],
  "license": "MIT",
  "main": "mingo.js",
  "name": "mingo",
  "optionalDependencies": {},
  "readme": "# Mingo\r\nJavaScript implementation of MongoDB query language\r\n\r\nMingo harnesses the power of MongoDB-style queries and allows direct querying of in-memory \r\njavascript objects in both client and server-side environments.\r\n\r\n[![build status](https://secure.travis-ci.org/kofrasa/mingo.png)](http://travis-ci.org/kofrasa/mingo)\r\n\r\n## Dependencies\r\n[underscore](https://github.com/jashkenas/underscore)\r\n\r\n## Installing\r\n```$ npm install mingo```\r\n\r\nIn browser\r\n```html\r\n<!-- DO NOT FORGET Underscore -->\r\n<script type=\"text/javascript\" src=\"./underscore-min.js\"></script>\r\n<script type=\"text/javascript\" src=\"./mingo.min.js\"></script>\r\n```\r\n\r\n## Features\r\n- Supports Dot Notation for both '_&lt;array&gt;.&lt;index&gt;_' and '_&lt;document&gt;.&lt;field&gt;_' selectors\r\n- Query and Projection Operators\r\n    - Array Operators (`$all`, `$elemMatch`, `$size`)\r\n    - Comparisons Operators (`$gt`, `$gte`, `$lt`, `$lte`, `$ne`, `$nin`, `$in`)\r\n    - Element Operators (`$exists`, `$type`)\r\n    - Evaluation Operators (`$regex`, `$mod`, `$where`)\r\n    - Logical Operators (`$and`, `$or`, `$nor`, `$not`)\r\n- Aggregation Framework Operators\r\n    - Pipeline Operators (`$group`, `$match`, `$project`, `$sort`, `$limit`, `$unwind`, `$skip`)\r\n    - Group Operators (`$addToSet`, `$sum`, `$max`, `$min`, `$avg`, `$push`, `$first`, `$last`)\r\n    - Projection Operators (`$elemMatch`, `$slice`)\r\n    - Arithmetic Operators (`$add`, `$divide`, `$mod`, `$multiply`, `$subtract`)\r\n    - Array Operators (`$size`)\r\n    - Boolean Operators (`$and`, `$or`, `$not`)\r\n    - Comparisons Operators (`$cmp`, `$gt`, `$gte`, `$lt`, `$lte`, `$ne`, `$nin`, `$in`)\r\n    - Conditional Operators (`$cond`, `$ifNull`)\r\n    - Date Operators (`$dayOfYear`, `$dayOfMonth`, `$dayOfWeek`, `$year`, `$month`, `$week`, `$hour`, `$minute`, `$second`, `$millisecond`, `$dateToString`)\r\n    - Literal Operators (`$literal`)\r\n    - Set Operators (`$setEquals`, `$setIntersection`, `$setDifference`, `$setUnion`, `$setIsSubset`, `$anyElementTrue`, `$allElementsTrue`)\r\n    - String Operators (`$strcasecmp`, `$concat`, `$substr`, `$toLower`, `$toUpper`)\r\n    - Variable Operators (`$map`, `$let`)\r\n- Support for custom operators\r\n- BackboneJS Integration\r\n- JSON stream filtering and projection. *NodeJS only*\r\n\r\nFor documentation on using query operators see [mongodb](http://docs.mongodb.org/manual/reference/operator/query/)\r\n\r\n\r\n## Usage\r\n```js\r\n\r\nvar Mingo = require('mingo');\r\n// or just access *Mingo* global in browser\r\n\r\n// setup the key field for your collection\r\nMingo.setup({\r\n    key: '_id' // default\r\n});\r\n\r\n// create a query with criteria\r\n// find all grades for homework with score >= 50\r\nvar query = new Mingo.Query({\r\n    type: \"homework\",\r\n    score: { $gte: 50 }\r\n});\r\n```\r\n\r\n## Searching and Filtering\r\n```js\r\n// filter collection with find()\r\nvar cursor = query.find(collection);\r\n\r\n// shorthand with query criteria\r\n// cursor = Mingo.find(collection, criteria);\r\n\r\n// sort, skip and limit by chaining\r\ncursor.sort({student_id: 1, score: -1})\r\n    .skip(100)\r\n    .limit(100);\r\n\r\n// count matches\r\ncursor.count();\r\n\r\n// iterate cursor\r\n// iteration is forward only\r\nwhile (cursor.hasNext()) {\r\n    console.log(cursor.next());\r\n}\r\n\r\n// use first(), last() and all() to retrieve matched objects\r\ncursor.first();\r\ncursor.last();\r\ncursor.all();\r\n\r\n// Filter non-matched objects (\r\nvar result = query.remove(collection);\r\n```\r\n\r\n## Aggregation Pipeline\r\n```js\r\nvar agg = new Mingo.Aggregator([\r\n    {'$match': { \"type\": \"homework\"}},\r\n    {'$group':{'_id':'$student_id', 'score':{$min:'$score'}}},\r\n    {'$sort':{'_id': 1, 'score': 1}}\r\n]);\r\n\r\nvar result = agg.run(collection);\r\n\r\n// shorthand\r\nresult = Mingo.aggregate(\r\n    collection,\r\n    [\r\n        {'$match': { \"type\": \"homework\"}},\r\n        {'$group':{'_id':'$student_id', 'score':{$min:'$score'}}},\r\n        {'$sort':{'_id': 1, 'score': 1}}\r\n    ]\r\n);\r\n```\r\n\r\n## Stream Filtering\r\n```js\r\nvar JSONStream = require('JSONStream'),\r\n    fs = require('fs'),\r\n    Mingo = require('mingo');\r\n\r\nvar query = new Mingo.Query({\r\n  scores: { $elemMatch: {type: \"exam\", score: {$gt: 90}} }\r\n}, {name: 1});\r\n\r\nfile = fs.createReadStream('./students.json');\r\n\r\nvar qs = query.stream();\r\nqs.on('data', function (data) {\r\n    console.log(data); // log filtered outputs\r\n    // ex. { name: 'Dinah Sauve', _id: 49 }\r\n});\r\n\r\nfile.pipe(JSONStream.parse(\"*\")).pipe(qs);\r\n```\r\n\r\n## Backbone Integration\r\n```js\r\n// using with Backbone\r\nvar Grades = Backbone.Collection.extend(Mingo.CollectionMixin);\r\n\r\nvar grades = new Grades(collection);\r\n\r\n// find students with grades less than 50 in homework or quiz\r\n// sort by score ascending and type descending\r\ncursor = grades.query({\r\n    $or: [{type: \"quiz\", score: {$lt: 50}}, {type: \"homework\", score: {$lt: 50}}]\r\n}).sort({score: 1, type: -1}).limit(10);\r\n\r\n// print grade with the lowest score\r\ncursor.first();\r\n```\r\n\r\n## Documentation\r\n- [API](https://github.com/kofrasa/mingo/wiki/API)\r\n- [Custom Operators](https://github.com/kofrasa/mingo/wiki/Custom-Operators)\r\n\r\n## TODO\r\n - Geospatial Query Operators (`$geoWithin`, `$geoIntersects`, `$near`, `$nearSphere`)\r\n - Geometry Specifiers (`$geometry`, `$maxDistance`, `$center`, `$centerSphere`, `$box`, `$polygon`)\r\n\r\n## License\r\nMIT",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kofrasa/mingo.git"
  },
  "scripts": {
    "build": "uglifyjs mingo.js -c -m -o mingo.min.js --source-map mingo.min.map",
    "test": "tape test/*.js"
  },
  "version": "0.6.2"
}
